#
msgid ""
msgstr ""
"Project-Id-Version: 1.0.0\n"
"POT-Creation-Date: 2021-07-02 11:25:38.453686\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"

#: game_config
msgid "Pure Mathematics with Lean"
msgstr ""

#: intro
msgid ""
"# Pure mathematics with Lean, version 1.0.0\n"
"\n"
"## By Gihan Marasingha\n"
"\n"
"This is an interactive book aimed at beginning mathematics undergraduates. "
"You'll learn to prove\n"
"theorems online using a computer tool called Lean.\n"
"\n"
"At every stage in a theorem, there is a *target*, the thing you want to "
"prove, and a *context*, the\n"
"set of things you have already proved or assumed at the beginning of your "
"argument.\n"
"The target and context change through the proof.\n"
"\n"
"The word *goal* is used to refer variously to the target or to the "
"combination of target and context.\n"
"\n"
"You'll use *tactics* to modify the goal until you have proved the target "
"(called 'closing the goal').\n"
"Each tactic may invoke one or more *theorems*.\n"
"\n"
"\n"
"## Credits\n"
"\n"
"This game was made using the code base of the\n"
"<a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/"
"\">Natural Number Game</a>\n"
"by Kevin Buzzard and Mohammad Pedramfar.\n"
"\n"
"<a href=\"https://leanprover.github.io/\" target=\"blank\">Lean</a> is an "
"interactive theorem prover developed at Microsoft Research under the "
"direction of\n"
"Leonardo de Moura.\n"
"\n"
"Mathlib, Lean's mathematical library, is developed by the <a href=\"https://"
"leanprover-community.github.io/\" target=\"blank\">Lean community</a>.\n"
"\n"
"*Pure mathematics with Lean* is part of the \n"
"<a href=\"https://exlean.org\" target=\"blank\">exlean</a> project.\n"
msgstr ""

#: world_config
msgid "Equations"
msgstr ""

#: Equations level 1
msgid ""
"# Equations\n"
"\n"
"## Level 1: Proving equations through reflexivity\n"
"\n"
"In the introduction, you read that tactics are used modify the goal, "
"eventually proving \n"
"a theorem.\n"
"\n"
"The `refl` tactic (short for `reflexivity`) can be used to prove any "
"statement of the form\n"
"`?X = ?X`. Here, I use `?X` to stand in for any expression of any type.\n"
"It could be `8 + 9` or `a * b` or `\"adele\"` or whatever.\n"
"\n"
"Here, you are asked to prove `x + y = x + y`, where `x` and `y` are "
"integers.\n"
"The word `sorry` between the `begin` and `end` lines below asks Lean not to "
"give an error message if a\n"
"proof isn't complete. You'll see a warning message in the bottom-right hand "
"pane. This indicates\n"
"you shouldn't trust the proof just yet, as it uses `sorry`!\n"
"\n"
"Delete `sorry` (using the backspace key on your keyboard). In the right-hand "
"pane you'll see:\n"
"```\n"
"x y : ℤ\n"
"⊢ x + y = x + y\n"
"```\n"
"\n"
"Here, `x y : ℤ` is the *context*, the set of things you know. In this case, "
"you know `x` and `y`\n"
"are integers.\n"
"\n"
"The *target* is `⊢ x + y = x + y`. The `⊢` symbol can be read 'to prove'. So "
"your target is\n"
"to prove `x + y = x + y`.\n"
"\n"
"The bottom part of the right-hand pane shows an *error message*. Don't "
"panic! It's just telling you\n"
"that you haven't yet proved the result.\n"
"\n"
"Your task is to replace `sorry` with `refl,`. Note the comma at the end of "
"the line!\n"
"If you're successful, Lean will respond with the message `Proof complete!` "
"or `no goals`.\n"
msgstr ""

#: Equations level 1
msgid ""
"The `refl` tactic closes any goal of the form `?X = ?X`. That is, it proves "
"any equation where the\n"
"left and right sides are *definitionally equal*.\n"
msgstr ""

#: Equations level 1
msgid ""
"## Translation to a hand-written proof\n"
"\n"
"In words, the `refl` says, \"The result holds by reflexivity\". A one-line "
"written proof of\n"
"the theorem below would be, \"The result hold by reflexivity\".\n"
"\n"
msgstr ""

#: Equations level 1 2
msgid "variables (x y : ℤ) -- Declare `x` and `y` to be integers."
msgstr ""

#: Equations level 1
msgid "`x + y = x + y`, for all integers `x` and `y`.\n"
msgstr ""

#: Equations level 2
msgid ""
"# Equations\n"
"\n"
"## Level 2: Commutativity of addition\n"
"\n"
"Now we'll prove something (slighlty) more interesting, that `x + y = y + x` "
"for all integers `x`\n"
"and `y`. Try the `refl` tactic below (remember to put a comma after `refl`) "
"and see what happens.\n"
"\n"
"You'll get an error message:\n"
"```\n"
"invalid apply tactic, failed to unify\n"
"  x + y = y + x\n"
"with\n"
"  ?m_2 = ?m_2\n"
"```\n"
"\n"
"Lean tells you that you're trying to use `refl` to prove `x + y = y + x`, "
"but it expects a target\n"
"of the form `?m_2 = ?m_2`. There's no special meaning to the underscores "
"here. It's the same as\n"
"writing `?X = ?X` as in the previous level.\n"
"\n"
"The problem: even though we 'know' the left and right sides are equal, they "
"are not\n"
"*identically equal*.\n"
"Fortunately, Lean comes with a *theorem* of just the right kind. It's called "
"`add_comm`.\n"
"The result `add_comm a b` states that `a + b = b + a`, where `a` and `b` are "
"integers.\n"
"\n"
"To apply this theorem, we'll use the `rw` (short for `rewrite`) tactic.\n"
"\n"
"Replace the `sorry` below with `rw add_comm` (followed by a comma—I won't "
"mention this from now\n"
"on).\n"
"Lean will look for the first expression that matches the pattern `a + b` and "
"replace it with\n"
"`b + a`. Here, Lean finds `x + y` and replaces it with `y + x`.\n"
"\n"
"The goal now is to prove `y + x = y + x`. You'll know how to prove a goal of "
"this kind from\n"
"the previous level. Write the proof on the line after the `rw add_comm`.\n"
msgstr ""

#: Equations level 2
msgid "`x + y = y + x`, for all integers `x` and `y`.\n"
msgstr ""

#: Equations level 2
msgid ""
"## Translation to a hand-written proof\n"
"\n"
"In words, the `rw add_comm` says, \"Rewrite using commuativity of addition"
"\".\n"
"As hand-written proofs aren't interactive, it's helpful to mention "
"explicitly any changes to the\n"
"context. Here's a hand-written proof of the above result.\n"
"\n"
"> Rewriting using commutativity of addition, the goal is to prove `y + x = y "
"+ x`.\n"
"> This follows by reflexivity.\n"
msgstr ""

#: world_config
msgid "Functions"
msgstr ""

#: Functions level 1
msgid "-- import the definition of the function `f`."
msgstr ""

#: Functions level 1
msgid ""
"# Functions\n"
"\n"
"## Level 1: \n"
"\n"
"-- Level name: the name of the level.\n"
"\n"
"You are in a maze of twisty passages, all distinct! \n"
"\n"
"You can go north, south east or west.\n"
msgstr ""

#: Functions level 1
msgid ""
"There are 5 rooms. Rooms are called 0, 1, 2, 3 and 4, with 0 being\n"
"where you start and 4 being the exit.\n"
"\n"
"\n"
"Use `n`, `s`, `e`, `w` to move around. When you're at the exit, type `out`.\n"
"\n"
"  Don't forget the commas.\n"
"  Don't bang into the walls -- those are errors.\n"
"  When you get to room 4, the tactic to get you out is `out`. \n"
"  There is also a magic word, rumoured to be\n"
"  an ancient translation of the word `sorry`.\n"
msgstr ""
